# Optional but recommended: Specify the Compose specification version
version: '3.8'

# --- Services Definition (Top Level) ---
services:
  # --- Database ---
  mariadb:
    image: mariadb:10.11 # Use a specific stable version
    container_name: guestwifi-mariadb
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD} # Set in .env
      MARIADB_DATABASE: ${MARIADB_DATABASE}          # Set in .env or use default
      MARIADB_USER: ${MARIADB_USER}                  # Set in .env or use default
      MARIADB_PASSWORD: ${MARIADB_PASSWORD} # Set in .env
    volumes:
      - mariadb_data:/var/lib/mysql
      # Optional: Mount initialization scripts (e.g., to create tables if needed)
      # - ./config/mariadb/initdb.d:/docker-entrypoint-initdb.d
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- FreeRADIUS ---
  freeradius:
    image: freeradius/freeradius-server:latest-3.2 # Use a specific stable tag
    container_name: guestwifi-freeradius
    restart: unless-stopped
    command: ["radiusd", "-X"] # Run in foreground debug mode
    depends_on:
      mariadb:
        condition: service_healthy # Wait for MariaDB to be ready
    environment:
      # Pass DB credentials to FreeRADIUS environment (used in sql.conf)
      MARIADB_HOST: mariadb # Service name of the DB container
      MARIADB_PORT: 3306
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      # RADIUS specific secrets (should be strong)
      RADIUS_SHARED_SECRET: ${RADIUS_SHARED_SECRET} # Secret for NAS/APs
      RADIUS_CLIENTS: ${RADIUS_CLIENTS} # Example: IP/CIDR of allowed NAS/APs
      RADIUS_BLOCKED_GROUP: ${RADIUS_BLOCKED_GROUP} # Group name used for blocking
    ports:
      # Expose RADIUS ports to your network where APs are located
      # Map host port to container port if needed, otherwise just expose container port
      - "1812:1812/udp" # Authentication
      - "1813:1813/udp" # Accounting
    volumes:
      # Mount configuration files - CRITICAL STEP
      - ./config/freeradius/radiusd.conf:/etc/freeradius/radiusd.conf:ro
      - ./config/freeradius/sql.conf:/etc/freeradius/mods-config/sql/main/mysql/sql.conf:ro
      - ./config/freeradius/clients.conf:/etc/freeradius/clients.conf:ro
      - ./config/freeradius/sites-enabled/default:/etc/freeradius/sites-enabled/default:ro
      # Mount other necessary mods configs if customized (e.g., eap.conf)
      # - ./config/freeradius/mods-enabled/sql:/etc/freeradius/mods-enabled/sql:ro # Usually symlink is fine
      # Optional: Persist logs
      # - freeradius_logs:/var/log/radius
    networks:
      - internal_network # Connect to DB
      # Add to a network reachable by your APs if they are outside the Docker host
      # - ap_network

  # --- Backend API ---
  guest-manager-backend:
    build:
      context: ./backend # Path to your backend code and Dockerfile
      dockerfile: Dockerfile
    container_name: guestwifi-backend
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy # Wait for DB
    environment:
      NODE_ENV: ${NODE_ENV} # 'development' or 'production'
      PORT: 3000
      DB_URL: mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@mariadb:3306/${MARIADB_DATABASE}
      JWT_SECRET: ${JWT_SECRET} # Set in .env
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN} # How long logins are valid
      SMTP_HOST: ${SMTP_HOST} # Set in .env
      SMTP_PORT: ${SMTP_PORT} # Set in .env
      SMTP_USER: ${SMTP_USER} # Set in .env
      SMTP_PASS: ${SMTP_PASS} # Set in .env
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS} # Optional: Set in .env (e.g., no-reply@yourdomain.com)
      SMTP_TLS_REJECT_UNAUTHORIZED: ${SMTP_TLS_REJECT_UNAUTHORIZED} # Set to false for self-signed certs
      RADIUS_BLOCKED_GROUP: ${RADIUS_BLOCKED_GROUP} # Group name used for blocking
      # Optional: For development, mount code for live reload (requires nodemon etc.)
      # volumes:
      #  - ./backend:/usr/src/app
      #  - /usr/src/app/node_modules # Exclude node_modules from host mount
    networks:
      - internal_network # To reach DB
      - proxy_network    # To be reached by Nginx Proxy Manager

  # --- Frontend UI ---
  guest-manager-frontend:
    build:
      context: ./frontend # Path to your Vue frontend code
      dockerfile: Dockerfile # Assumes Dockerfile from previous example exists
      args:
        # Sets the base URL for API calls within the frontend build
        VITE_API_BASE_URL: ${VITE_API_BASE_URL} # Base path Nginx Proxy Mgr forwards to backend
    container_name: guestwifi-frontend
    restart: unless-stopped
    networks:
      - proxy_network # Only needs to be reachable by Nginx Proxy Manager

# --- Networks Definition (Top Level - aligned with 'services') ---
networks:
  internal_network:
    driver: bridge # Internal communication between backend, db, radius
  proxy_network:
    external: true # Assumes network used by Nginx Proxy Manager already exists
    name: ${NPM_NETWORK} # Name of the NPM network (set in .env if different)

# --- Volumes Definition (Top Level - aligned with 'services' and 'networks') ---
volumes:
  mariadb_data:
    # Using a named volume managed by Docker
  # freeradius_logs: # Uncomment if persisting logs