# /etc/raddb/radiusd.conf
#
# Configuration file for the FreeRADIUS server daemon.
#
# This file is the main configuration file. It is sourced by radiusd.
# It contains the configuration for the server itself. It also contains
# references to other configuration files for modules, sites, etc.
#
# Most settings have reasonable defaults. You should change Defines,
# addresses, ports, logging and security configuration.

# --- Basic Definitions ---
# These paths should match the standard locations within the freeradius/freeradius-server image
prefix = /usr/local
exec_prefix = ${prefix}
sysconfdir = /etc/raddb
localstatedir = /var
sbindir = ${exec_prefix}/sbin
logdir = /var/log/radius
raddbdir = ${sysconfdir}
radacctdir = ${logdir}/radacct

# The configuration directory for modules. e.g. ${confdir}/mods-config/sql/mysql/sql.conf
modconfdir = ${confdir}/mods-config

# The library directory.
libdir = /usr/lib/freeradius

# The location of the dictionary files
# dictionary = ${confdir}/dictionary # Default is usually fine

# --- User/Group ---
# Define the user and group the server runs as. Recommended for security.
# The freeradius/freeradius-server image typically creates a 'radiusd' user/group.
# user = radiusd
# group = radiusd

# --- Security Configuration ---
security {
        # Limits for security checks
        max_attributes = 200
        reject_delay = 1
        status_server = yes # Allow status queries (radmin) - disable if not needed

        # Allow core dumps? Useful for debugging crashes, disable in production.
        allow_core_dumps = no
}

# --- Logging Configuration ---
# Log to STDOUT/STDERR so 'docker logs' works well.
# Also configure file logging within the container (can be mounted if needed).
log {
        # Log to stdout/stderr for Docker logs
        destination = stdout # Can also use 'stderr'

        # Also log to a file inside the container
        # You could mount freeradius_logs volume to /var/log/radius to persist these
        # file = ${logdir}/radius.log

        # Syslog logging (can be useful if you aggregate logs outside Docker)
        # syslog_facility = daemon

        # Level of detail (info, auth, auth_detail, error, warn)
        level = info # Change to 'auth_detail' or 'debug' for verbose debugging

        # Log authentication requests? (yes/no)
        auth = yes
        auth_badpass = yes # Log bad passwords? Maybe sensitive.
        auth_goodpass = no # Log good passwords? Very sensitive.

        # Log usernames with stripped realm?
        stripped_names = no

        # Include source file and line number in logs? Useful for debugging.
        # src_ip_addr_in_logs = yes
        # file_and_line_in_logs = yes # Can be very verbose
}

# --- Module Instantiation ---
# Load selected modules globally when the server starts.
# The 'sql' module is crucial for this setup.
instantiate {
        # Load the SQL module. This sets up the connection pool.
        sql

        # Add other globally needed modules here if necessary
        # e.g., digest, exec, etc.
}

# --- Modules Configuration Loading ---
# Where to find module configurations.
# The 'mods-enabled' directory usually contains symlinks to 'mods-available'.
# We are mounting our specific config directly into 'mods-config', so we point there.
modules {
        # $INCLUDE ${confdir}/mods-enabled/ # Default way - uses symlinks

        # Point to where module configs are found.
        # Our mounted sql.conf is in mods-config/sql/main/mysql/
        # The server should find it based on the SQL module's internal path structure.
        # No explicit include needed here if using standard module structure.

        # If you add custom modules, ensure their configs are findable.
}

# --- Policy Configuration ---
# Load policies (sequences of module calls) if you define custom ones.
# policy {
#       $INCLUDE ${confdir}/policy.d/
# }

# --- Thread Pool Configuration ---
# Tuning for performance. Defaults are usually okay to start.
thread pool {
        start_servers = 5
        max_servers = 32
        min_spare_servers = 3
        max_spare_servers = 10
        # max_queue_size = 65536 # Often unlimited by default
        max_requests_per_server = 0 # 0 means unlimited
}

# --- Client Configuration ---
# Where to find client (NAS) definitions.
# We mount our custom clients.conf here.
clients {
       $INCLUDE ${confdir}/clients.conf
}

# --- Main Processing Logic ---
# Include the site-specific configurations from sites-enabled/.
# This is where the authorize, authenticate, etc. sections are defined.
# We mount our customized 'default' site configuration here.
$INCLUDE ${confdir}/sites-enabled/

# --- End of File ---